import { rootApi } from "./RootApi";

export const EpisodeApi = rootApi.injectEndpoints({
  endpoints: (builder) => ({
    getEpisodeById: builder.query({
      query: (episodeId) => `episode/${episodeId}`,
      providesTags: (result, error, id) => [{ type: "Episode", id }],
    }),
    getEpisodeByPatientId: builder.query({
      query: (patientId) => `episode/patient/${patientId}`,
      providesTags: (result, error, id) => [{ type: "Episode", id }],
    }),
    createEpisode: builder.mutation({
      query: (episodeData) => ({
        url: "episode",
        method: "POST",
        body: episodeData,
      }),
      invalidatesTags: [{ type: "Episode" }],
    }),
    createTestEpisode: builder.mutation({
      query: (episodeData) => ({
        url: "episode/test",
        method: "POST",
        body: episodeData,
      }),
      invalidatesTags: [{ type: "Episode" }],
    }),
    getAllEpisodes: builder.query({
      query: () => ({
        url: "episode",
        method: "GET",
      }),
      providesTags: (result, error, _) => [{ type: "Episode" }],
    }),
    updateEpisode: builder.mutation({
      query: ({ episodeId, episodeData }) => ({
        url: `episode/${episodeId}`,
        method: "PUT",
        body: episodeData,
      }),
      invalidatesTags: (result, error, id) => [{ type: "Episode", id }],
    }),
    deleteEpisode: builder.mutation({
      query: (episodeId) => ({
        url: `episode/${episodeId}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, id) => [{ type: "Episode", id }],
    }),
  }),
});

// Export hooks generated by the endpoints
export const {
  useGetEpisodeByIdQuery,
  useGetEpisodeByPatientIdQuery,
  useCreateEpisodeMutation,
  useCreateTestEpisodeMutation,
  useGetAllEpisodesQuery,
  useUpdateEpisodeMutation,
  useDeleteEpisodeMutation,
} = EpisodeApi;
