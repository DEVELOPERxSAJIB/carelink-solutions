import { rootApi } from "./RootApi";

export const ScheduleApi = rootApi.injectEndpoints({
  endpoints: (builder) => ({
    // Query endpoint to get a schedule by ID
    getScheduleById: builder.query({
      query: (scheduleId) => `schedule/${scheduleId}`,
      providesTags: (result, error, _id) => [{ type: "Schedule", id: _id }],
    }),
    getScheduleByPatientId: builder.query({
      query: (scheduleId) => `schedule/patient/${scheduleId}`,
      providesTags: (result, error, _id) => [{ type: "Schedule", id: _id }],
    }),

    // Query endpoint to get all schedules
    getAllSchedules: builder.query({
      query: () => ({
        url: "schedule",
        method: "GET",
      }),
      providesTags: (result, error) => [{ type: "Schedule" }],
    }),

    // Mutation endpoint to create a new schedule
    createSchedule: builder.mutation({
      query: (scheduleData) => ({
        url: "schedule",
        method: "POST",
        body: scheduleData,
      }),
      invalidatesTags: [{ type: "Schedule" }],
    }),

    // Mutation endpoint to update an existing schedule
    updateSchedule: builder.mutation({
      query: ({ scheduleId, scheduleData }) => ({
        url: `schedule/${scheduleId}`,
        method: "PUT",
        body: scheduleData,
      }),
      invalidatesTags: (result, error, { id }) => [
        { type: "Schedule", id: id },
      ],
    }),

    // Mutation endpoint to delete a schedule
    deleteSchedule: builder.mutation({
      query: (scheduleId) => ({
        url: `schedule/${scheduleId}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, _id) => [{ type: "Schedule", id: _id }],
    }),
  }),
});

// Export hooks generated by the endpoints
export const {
  useGetScheduleByIdQuery,
  useGetAllSchedulesQuery,
  useGetScheduleByPatientIdQuery,
  useCreateScheduleMutation,
  useUpdateScheduleMutation,
  useDeleteScheduleMutation,
} = ScheduleApi;
