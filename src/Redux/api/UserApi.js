import { rootApi } from "./RootApi";

export const UserApi = rootApi.injectEndpoints({
  endpoints: (builder) => ({
    getUserById: builder.query({
      query: (userId) => `auth/${userId}`,
      providesTags: (result, error, userId) => [{ type: "User", id: userId }],
    }),
    registerUser: builder.mutation({
      query: (userData) => ({
        url: "auth/register",
        method: "POST",
        body: userData,
      }),
      invalidatesTags: [{ type: "User" }],
    }),
    loginUser: builder.mutation({
      query: (userData) => ({
        url: "auth/login",
        method: "POST",
        body: userData,
      }),
      invalidatesTags: [{ type: "User" }],
    }),
    logOutUser: builder.mutation({
      query: () => ({
        url: "auth/logout",
        method: "POST",
        body: "",
      }),
      invalidatesTags: [{ type: "User" }],
    }),
    me: builder.query({
      query: () => ({
        url: "auth/me",
        method: "GET",
      }),
      invalidatesTags: [{ type: "User" }],
    }),
    updateUser: builder.mutation({
      query: ({ userId, userData }) => ({
        url: `auth/${userId}`,
        method: "PUT",
        body: userData,
      }),
      invalidatesTags: (result, error, { userId }) => [
        { type: "User", id: userId },
      ],
    }),
  
    deleteUser: builder.mutation({
      query: (userId) => ({
        url: `auth/${userId}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, userId) => [
        { type: "User", id: userId },
      ],
    }),
  }),
});

// Export hooks generated by the endpoints
export const {
  useGetUserByIdQuery,
  useMeQuery,
  useRegisterUserMutation,
  useUpdateUserMutation,
  useDeleteUserMutation,
  useLoginUserMutation,
  useLogOutUserMutation,
} = UserApi;
