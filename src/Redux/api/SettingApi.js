import { rootApi } from "./RootApi";

export const agencyInvoiceApi = rootApi.injectEndpoints({
  endpoints: (builder) => ({
    getUserById: builder.query({
      query: (userId) => `settings/${userId}`,
      providesTags: (result, error, _id) => [{ type: "Setting", id: _id }],
    }),
    createCompany: builder.mutation({
      query: (companyData) => ({
        url: "settings/create-company",
        method: "POST",
        body: companyData,
      }),
      invalidatesTags: [{ type: "Setting" }],
    }),
    companyProfileGetById: builder.query({
      query: () => `settings/company-profile`,
      providesTags: [{ type: "Setting"}],
    }),
    agencyInvoice: builder.mutation({
      query: (companyData) => ({
        url: "settings/agency-invoice",
        method: "POST",
        body: companyData,
      }),
      invalidatesTags: [{ type: "Setting" }],
    }),
    agencyInvoiceById: builder.query({
      query: (invoiceId) => `settings/agency-invoice/${invoiceId}`,
      providesTags: (result, error, _id) => [{ type: "Setting", id: _id }],
    }),
    agencyInvoiceUpdate: builder.mutation({
      query: ({ invoiceId, agencyInvoiceData }) => ({
        url: `settings/agency-invoice-update/${invoiceId}`,
        method: "PUT",
        body: agencyInvoiceData,
      }),
      invalidatesTags: (result, error,  _id ) => [
        { type: "Setting", id: _id },
      ],
    }),
    agencyInvoiceDelete: builder.mutation({
      query: (invoiceId) => ({
        url: `settings/agency-invoice-delete/${invoiceId}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, _id) => [
        { type: "Setting", id: _id },
      ],
    }),
    createQuestion: builder.mutation({
      query: (questionData) => ({
        url: "settings/questions",
        method: "POST",
        body: questionData,
      }),
      invalidatesTags: [{ type: "Setting" }],
    }),
    getQuestions: builder.query({
      query: () => `settings/questions`,
      providesTags: (result, error, questionId) => [{ type: "Setting", id: questionId }],
    }),
    createNotifications: builder.mutation({
      query: (questionData) => ({
        url: "settings/notifications",
        method: "POST",
        body: questionData,
      }),
      invalidatesTags: [{ type: "Setting" }],
    }),
    getNotifications: builder.query({
      query: () => `settings/notifications`,
      providesTags: (result, error, notificationId) => [{ type: "Setting", id: notificationId }],
    }),
  }),
});

// Export hooks generated by the endpoints
export const {
  useGetUserByIdQuery,
  useCreateCompanyMutation,
  useAgencyInvoiceMutation,
  useAgencyInvoiceByIdQuery,
  useAgencyInvoiceUpdateMutation,
  useAgencyInvoiceDeleteMutation,
  useCreateQuestionMutation,
  useCompanyProfileGetByIdQuery,
  useGetQuestionsQuery,
  useCreateNotificationsMutation,
useGetNotificationsQuery
} = agencyInvoiceApi;
