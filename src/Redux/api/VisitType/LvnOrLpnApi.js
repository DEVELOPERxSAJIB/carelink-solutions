import { rootApi } from "../RootApi";

export const LvnOrLpnApi = rootApi.injectEndpoints({
  endpoints: (builder) => ({
    // Query endpoint to get an LvnOrLpn record by ID
    getLvnOrLpnById: builder.query({
      query: (id) => `lvnorlpn/${id}`,
      providesTags: (result, error, id) => [{ type: "LvnOrLpn", id }],
    }),

    // Query endpoint to get all LvnOrLpn records by patient ID
    getLvnOrLpnByPatientId: builder.query({
      query: (patientId) => `lvnorlpn/patient/${patientId}`,
      providesTags: (result, error, patientId) => [
        { type: "PatientLvnOrLpn", id: patientId },
      ],
    }),

    // Mutation endpoint to create a new LvnOrLpn record
    createLvnOrLpn: builder.mutation({
      query: (lvnOrLpnData) => ({
        url: "lvnorlpn",
        method: "POST",
        body: lvnOrLpnData,
      }),
      invalidatesTags: [{ type: "LvnOrLpn" }, { type: "PatientLvnOrLpn" }],
    }),

    // Mutation endpoint to update an existing LvnOrLpn record
    updateLvnOrLpn: builder.mutation({
      query: ({ id, lvnOrLpnData }) => ({
        url: `lvnorlpn/${id}`,
        method: "PUT",
        body: lvnOrLpnData,
      }),
      invalidatesTags: (result, error, { id }) => [
        { type: "LvnOrLpn", id },
        { type: "PatientLvnOrLpn", id: result?.patientId }, // Assuming result includes patientId
      ],
    }),

    // Mutation endpoint to delete an LvnOrLpn record
    deleteLvnOrLpn: builder.mutation({
      query: (id) => ({
        url: `lvnorlpn/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, id) => [
        { type: "LvnOrLpn", id },
        { type: "PatientLvnOrLpn", id: result?.patientId }, // Assuming result includes patientId
      ],
    }),
  }),
});

// Export hooks generated by the endpoints
export const {
  useGetLvnOrLpnByIdQuery,
  useGetLvnOrLpnByPatientIdQuery,
  useCreateLvnOrLpnMutation,
  useUpdateLvnOrLpnMutation,
  useDeleteLvnOrLpnMutation,
} = LvnOrLpnApi;
