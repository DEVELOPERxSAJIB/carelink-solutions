import { rootApi } from "../RootApi";

export const ChangeInFocusApi = rootApi.injectEndpoints({
  endpoints: (builder) => ({
    // Query endpoint to get a ChangeInFocus record by ID
    getChangeInFocusById: builder.query({
      query: (id) => `changeinfocus/${id}`,
      providesTags: (result, error, id) => [{ type: "ChangeInFocus", id }],
    }),

    // Query endpoint to get all ChangeInFocus records by patient ID
    getChangeInFocusByPatientId: builder.query({
      query: (patientId) => `changeinfocus/patient/${patientId}`,
      providesTags: (result, error, patientId) => [
        { type: "PatientChangeInFocus", id: patientId },
      ],
    }),

    // Mutation endpoint to create a new ChangeInFocus record
    createChangeInFocus: builder.mutation({
      query: (changeInFocusData) => ({
        url: "changeinfocus",
        method: "POST",
        body: changeInFocusData,
      }),
      invalidatesTags: [
        { type: "ChangeInFocus" },
        { type: "PatientChangeInFocus" },
      ],
    }),

    // Mutation endpoint to update an existing ChangeInFocus record
    updateChangeInFocus: builder.mutation({
      query: ({ id, changeInFocusData }) => ({
        url: `changeinfocus/${id}`,
        method: "PUT",
        body: changeInFocusData,
      }),
      invalidatesTags: (result, error, { id }) => [
        { type: "ChangeInFocus", id },
        { type: "PatientChangeInFocus", id: result?.patientId }, // Assuming result includes patientId
      ],
    }),

    // Mutation endpoint to delete a ChangeInFocus record
    deleteChangeInFocus: builder.mutation({
      query: (id) => ({
        url: `changeinfocus/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, id) => [
        { type: "ChangeInFocus", id },
        { type: "PatientChangeInFocus", id: result?.patientId }, // Assuming result includes patientId
      ],
    }),
  }),
});

// Export hooks generated by the endpoints
export const {
  useGetChangeInFocusByIdQuery,
  useGetChangeInFocusByPatientIdQuery,
  useCreateChangeInFocusMutation,
  useUpdateChangeInFocusMutation,
  useDeleteChangeInFocusMutation,
} = ChangeInFocusApi;
