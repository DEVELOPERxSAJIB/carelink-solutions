import { rootApi } from "../RootApi";

export const NonOASISDischargeApi = rootApi.injectEndpoints({
  endpoints: (builder) => ({
    // Query endpoint to get a NonOASISDischarge by ID
    getNonOASISDischargeById: builder.query({
      query: (id) => `nonoasisdischarge/${id}`,
      providesTags: (result, error, id) => [{ type: "NonOASISDischarge", id }],
    }),

    // Query endpoint to get all NonOASISDischarges by patient ID
    getNonOASISDischargesByPatientId: builder.query({
      query: (patientId) => `nonoasisdischarge/patient/${patientId}`,
      providesTags: (result, error, patientId) => [
        { type: "PatientNonOASISDischarge", id: patientId },
      ],
    }),

    // Mutation endpoint to create a new NonOASISDischarge
    createNonOASISDischarge: builder.mutation({
      query: (nonOASISDischargeData) => ({
        url: "nonoasisdischarge",
        method: "POST",
        body: nonOASISDischargeData,
      }),
      invalidatesTags: [
        { type: "NonOASISDischarge" },
        { type: "PatientNonOASISDischarge" },
      ],
    }),

    // Mutation endpoint to update an existing NonOASISDischarge
    updateNonOASISDischarge: builder.mutation({
      query: ({ id, nonOASISDischargeData }) => ({
        url: `nonoasisdischarge/${id}`,
        method: "PUT",
        body: nonOASISDischargeData,
      }),
      invalidatesTags: (result, error, { id }) => [
        { type: "NonOASISDischarge", id },
        { type: "PatientNonOASISDischarge", id: result?.patientId }, // Assuming result includes patientId
      ],
    }),

    // Mutation endpoint to delete a NonOASISDischarge
    deleteNonOASISDischarge: builder.mutation({
      query: (id) => ({
        url: `nonoasisdischarge/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, id) => [
        { type: "NonOASISDischarge", id },
        { type: "PatientNonOASISDischarge", id: result?.patientId }, // Assuming result includes patientId
      ],
    }),
  }),
});

// Export hooks generated by the endpoints
export const {
  useGetNonOASISDischargeByIdQuery,
  useGetNonOASISDischargesByPatientIdQuery,
  useCreateNonOASISDischargeMutation,
  useUpdateNonOASISDischargeMutation,
  useDeleteNonOASISDischargeMutation,
} = NonOASISDischargeApi;
